type Estado is variant {
/*
PRO: Modelar el estado del avión
*/
    case Saliente {} -- avión listo para despegar
    case EnRuta {} -- avión en vuelo
    case Aterrizado {} -- avión llegó a destino
}

type TorreDeControl is record {
    field vuelos -- [Vuelo]
    field planesDeVuelo --[PlanDeDestino]
}

type Vuelo is record {
    field número -- Número
    field origen -- Coord
    field destino -- Coord
    field estado -- Estado
    field etapaEnPlanDeVuelo -- Número
}

type PlanDeDestino is record {
    field origen -- Coord 
    field destino -- Coord
    field planDeVuelo -- [Dirección]
}

type Coord is record {
-- INVARIANTE DE REP: los valores de fila y columna tienen que ser >= 0
	field fila
	field columna
}

program {
    coord1 := Coord(fila <- 3, columna <- 1)
	coord2 := Coord(fila <- 1, columna <- 3)
	coord3 := Coord(fila <- 2, columna <- 2)
	
	planDeVuelo1 := [Norte, Norte, Este, Este]
	planDeVuelo2 := [Sur, Sur, Sur, Este]
	planDeVuelo3 := [Oeste, Oeste, Sur, Sur]
	
	planDeDestino1 := PlanDeDestino(origen <- coord1, destino <- coord2, planDeVuelo <- planDeVuelo1)
	planDeDestino2 := PlanDeDestino(origen <- coord1, destino <- coord2, planDeVuelo <- planDeVuelo2)
	planDeDestino3 := PlanDeDestino(origen <- coord1, destino <- coord2, planDeVuelo <- planDeVuelo3)
	
	vuelo1 := Vuelo(número <- 40, origen <- coord1, destino <- coord2, estado <- Saliente, etapaEnPlanDeVuelo <- 0)
	vuelo2 := Vuelo(número <- 41, origen <- coord2, destino <- coord3, estado <- EnRuta, etapaEnPlanDeVuelo <- 1)
	vuelo3 := Vuelo(número <- 42, origen <- coord1, destino <- coord3, estado <- Aterrizado, etapaEnPlanDeVuelo <- 2)
	
	torreDeControl := TorreDeControl(vuelos <- [vuelo1, vuelo2, vuelo3], planesDeVuelo <- [planDeDestino1, planDeDestino2, planDeDestino3])
	
	--return (vueloEnEstado([vuelo1, vuelo1, vuelo2, vuelo3], EnRuta))
	--return (despegarVuelo(torreDeControl))
    
}

function vueloEnEstado(vuelos, estado) {
/*
PRO: Describe el primero vuelo en la lista que tiene el @param estado
RET: Vuelo
@param vuelos: [Vuelo]
@param estado: Estado
*/
    vuelosTemp := vuelos
    while (not esVacía(vuelosTemp) && estado(primero(vuelosTemp)) /= estado) {
        vuelosTemp := resto(vuelosTemp)
    }
    return (choose primero(vuelosTemp) when (not esVacía(vuelosTemp))
                   [] otherwise)
}

function despegarVuelo(torreDeControl) {
/*
PRO: Describe la torre de control que se obtiene de despegar al primer vuelo en vuelos(torreDeControl)
que está en estado Saliente.
PRE: Hay al menos 1 vuelo en la torre de control cuyo estado es Saliente.
OBS: Para ello hay que cambiar el estado del vuelo a EnRuta e indicar que se encuentra en la etapa 1 del
plan de vuelo.
RET: TorreDeControl
@param torreDeControl: TorreDeControl
*/
    vuelos := vuelos(torreDeControl)
    vuelosRet := vuelosAntesDelVueloEnEstado(vuelos, Saliente) ++
                 [Vuelo(vueloEnEstado(vuelos, Saliente)|estado <- EnRuta, etapaEnPlanDeVuelo <- 1)] ++
                 vuelosDespuesDelVueloEnEstado(vuelos, Saliente) 
    return (TorreDeControl(torreDeControl|vuelos<-vuelosRet))
}

function vuelosAntesDelVueloEnEstado(vuelos, estado) {
/*
PRO: Describe una lista de vuelos con los vuelos que están antes del primer vuelo en @param estado
@param vuelos: [Vuelo]
*/
    vuelosTemp := vuelos
    vuelosRet := []
    while (not esVacía(vuelosTemp) && estado(primero(vuelosTemp)) /= estado) {
        vuelosRet := vuelosRet ++ [primero(vuelosTemp)]
        vuelosTemp := resto(vuelosTemp)
    }
    return (vuelosRet)
}

function vuelosDespuesDelVueloEnEstado(vuelos, estado) {
/*
PRO: Describe una lista de vuelos con los vuelos que están después del primer vuelo con @param estado.
OBS: Se excluye al primer vuelo en @param estado
@param vuelos: [Vuelo]
RET: [Vuelo]
*/
    vuelosTemp := vuelos
    while (not esVacía(vuelosTemp) && estado(primero(vuelosTemp)) /= estado) {
        vuelosTemp := resto(vuelosTemp)
    }
    return (choose resto(vuelosTemp) when (not esVacía(vuelosTemp))
                   [] otherwise)
}

function aterrizarVuelo(torreDeControl) {
/*
PRO: Describe la torre de control que se obtiene de aterrizar el primer vuelo en vuelos(torreDeControl)
que está en estado EnRuta y que haya llegado a destino (la etapa coincide con la longitud del plan de vuelo)
PRE: Hay al menos un vuelo en condiciones de aterrizar
OBS: Notar que para ello hay que cambiar el estado del vuelo a Aterrizado
*/
    vuelos := vuelosQueLlegaronADestino(torreDeControl)
    vuelosRet := vuelosAntesDelVueloEnEstado(vuelos, EnRuta) ++
                 [Vuelo(vueloEnEstado(vuelos, EnRuta)|estado <- Aterrizado)] ++
                 vuelosDespuesDelVueloEnEstado(vuelos, EnRuta) 
    return (TorreDeControl(torreDeControl|vuelos<-vuelosRet))
}

function vuelosQueLlegaronADestino(torreDeControl) {
/*
PRO: Describe una lista de vuelos con los aviones que llegaron a destino
PRE: Ninguna
@param torreDeControl: TorreDeControl
*/
    vuelosRet := []
    foreach vuelo in vuelos(torreDeControl) {
        vuelosRet := vuelosRet ++ choose vuelo when (longitud(planDeVuelo(torreDeControl, vuelo)) == etapaEnPlanDeVuelo(vuelo))
                                         [] otherwise
    }
    return (vuelosRet)
}

/*
PRO: Retorna la cantidad de elementos de una lista
TIPO: Recibe una lista de cualquier tipo
*/
function longitud(ls) {
	c := 0
	foreach i in ls {
		c := c + 1
	}
	return (c)
}

function planDeVuelo(torreDeControl, vuelo) {
/*
PRO: Describe el plan de vuelo acorde a un vuelo
PRE: No tiene
@param torreDeControl: TorreDeControl
@param vuelo: Vuelo
*/
    planesDeVuelo := planesDeVuelo(torreDeControl)
    while (not esVacía(planesDeVuelo) &&
           origen(vuelo) /= origen(primero(planesDeVuelo)) &&
           destino(vuelo) /= destino(primero(planesDeVuelo))) {
        planesDeVuelo := resto(planesDeVuelo)
    }
    return (choose planDeVuelo(primero(planesDeVuelo)) when (not esVacía(planesDeVuelo)
                   [] otherwise)
}


function coordenadaFutura(torreDeControl, númeroDeVuelo, tiempo) {
/*
PRO: Describe la coordeanda sobre la que estará sobrevolando el vuelo correspondiente a @param número de Vuelo
dentro de tiempo etapas, contando desde la etapa actual.
PRE: Se puede suponer que hay un vuelo EnRuta con el @param númeroDeVuelo y la etapa actual más tiempo no supera la 
longitud del plan de vuelo.
@param tiempo: Representa un tiempo en etapas
*/    
    
    
    
    
    return ()
}





function hayColisiónEnEtapa(torreDeControl, tiempo) {
/*
PRO: Indica si hay aviones cuyo estado es EnRuta que colisionarán en tiempo etapas, contando desde la etapa actual.
OBS: Dos aviones colisionarán en una etapa si pasan por la misma coordenada en esta etapa.
@param tiempo: Número que representa un tiempo en etapas
*/    
    
}

function hayColisión(torreDeControl) {
/*
PRO: Indica si hay aviones con estado EnRuta que colisionarán en alguna etapa futura.
OBS: Tener en cuenta que basta considerar solo n etapas futuras, donde n es la máxima etapa posible
(la longitud del plan de vuelos más largo posible)
*/   

}
