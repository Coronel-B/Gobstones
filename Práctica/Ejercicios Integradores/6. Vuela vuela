type Estado is variant {
/*
PRO: Modelar el estado del avión
*/
    case Saliente {} -- avión listo para despegar
    case EnRuta {} -- avión en vuelo
    case Aterrizado {} -- avión llegó a destino
}

type TorreDeControl is record {
    field vuelos -- [Vuelo]
    field planesDeVuelo --[PlanDeDestino]
}

type Vuelo is record {
    field número -- Número
    field origen -- Coord
    field destino -- Coord
    field estado -- Estado
    field etapaEnPlanDeVuelo -- Número
}

type PlanDeDestino is record {
    field origen -- Coord 
    field destino -- Coord
    field planDeVuelo -- [Dirección]
}

type Coord is record {
-- INVARIANTE DE REP: los valores de fila y columna tienen que ser >= 0
	field fila
	field columna
}

program {
    coord1 := Coord(fila <- 3, columna <- 1)
	coord2 := Coord(fila <- 1, columna <- 3)
	coord3 := Coord(fila <- 2, columna <- 2)
	
	planDeVuelo1 := [Norte, Norte, Este, Este]
	planDeVuelo2 := [Sur, Sur, Sur, Este]
	planDeVuelo3 := [Oeste, Oeste, Sur, Sur]
	
	planDeDestino1 := PlanDeDestino(origen <- coord1, destino <- coord2, planDeVuelo <- planDeVuelo1)
	planDeDestino2 := PlanDeDestino(origen <- coord1, destino <- coord2, planDeVuelo <- planDeVuelo2)
	planDeDestino3 := PlanDeDestino(origen <- coord1, destino <- coord2, planDeVuelo <- planDeVuelo3)
	
	vuelo1 := Vuelo(número <- 40, origen <- coord1, destino <- coord2, estado <- Saliente, etapaEnPlanDeVuelo <- 0)
	vuelo2 := Vuelo(número <- 41, origen <- coord2, destino <- coord3, estado <- EnRuta, etapaEnPlanDeVuelo <- 1)
	vuelo3 := Vuelo(número <- 42, origen <- coord1, destino <- coord3, estado <- Aterrizado, etapaEnPlanDeVuelo <- 2)
	
	torreDeControl := TorreDeControl(vuelos <- [vuelo1, vuelo2, vuelo3], planesDeVuelo <- [planDeDestino1, planDeDestino2, planDeDestino3])
	
	--return (vueloEnEstado([vuelo1, vuelo1, vuelo2, vuelo3], EnRuta))
	--return (despegarVuelo(torreDeControl))
    
}

function vueloEnEstado(vuelos, estado) {
/*
PRO: Describe el primero vuelo en la lista que tiene el @param estado
RET: Vuelo
@param vuelos: [Vuelo]
@param estado: Estado
*/
    vuelosTemp := vuelos
    while (not esVacía(vuelosTemp) && estado(primero(vuelosTemp)) /= estado) {
        vuelosTemp := resto(vuelosTemp)
    }
    return (choose primero(vuelosTemp) when (not esVacía(vuelosTemp))
                   [] otherwise)
}

function despegarVuelo(torreDeControl) {
/*
PRO: Describe la torre de control que se obtiene de despegar al primer vuelo en vuelos(torreDeControl)
que está en estado Saliente.
PRE: Hay al menos 1 vuelo en la torre de control cuyo estado es Saliente.
OBS: Para ello hay que cambiar el estado del vuelo a EnRuta e indicar que se encuentra en la etapa 1 del
plan de vuelo.
RET: TorreDeControl
@param torreDeControl: TorreDeControl
*/
    vuelos := vuelos(torreDeControl)
    vuelosRet := vuelosAntesDelVueloSaliente(vuelos) ++
                 [Vuelo(vueloEnEstado(vuelos, Saliente)|estado <- EnRuta, etapaEnPlanDeVuelo <- 1)] ++
                 vuelosDespuesDelVueloSaliente(vuelos) 
    return (TorreDeControl(torreDeControl|vuelos<-vuelosRet))
}

function vuelosAntesDelVueloSaliente(vuelos) {
/*
PRO: Describe una lista de vuelos con los vuelos que están antes del primer vuelo saliente
@param vuelos: [Vuelo]
*/
    vuelosTemp := vuelos
    vuelosRet := []
    while (not esVacía(vuelosTemp) && estado(primero(vuelosTemp)) /= Saliente) {
        vuelosRet := vuelosRet ++ [primero(vuelosTemp)]
        vuelosTemp := resto(vuelosTemp)
    }
    return (vuelosRet)
}

function vuelosDespuesDelVueloSaliente(vuelos) {
/*
PRO: Describe una lista de vuelos con los vuelos que están después del primer vuelo saliente.
OBS: Se excluye al primer vuelo saliente
@param vuelos: [Vuelo]
RET: [Vuelo]
*/
    vuelosTemp := vuelos
    while (not esVacía(vuelosTemp) && estado(primero(vuelosTemp)) /= Saliente) {
        vuelosTemp := resto(vuelosTemp)
    }
    return (choose resto(vuelosTemp) when (not esVacía(vuelosTemp))
                   [] otherwise)
}