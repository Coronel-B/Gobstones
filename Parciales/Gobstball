/*
Los arcos: 
	. Pueden ubicarse en cualquier lugar del tablero

Los jugadores: 
	. Se ubicaran en solamente 1 celda
	. No se podran mover hasta que no se anote el gol
	. Podra recibir la pelota
	. Pasarla 
	. Lanzar al arco si se encuentra cerca
	. Puede estar libre o marcado por un rival
	. Si esta marcado y recibiera un pase, perderia la pelota dando lugar al rival para anotar (no deseable)
	. C/jugador pertenece a 1 equipo: colorEquipoX()
	. C/jugador puede tocar la pelota solo una vez en una sucesion de pases que termine en gol: MarcarJugadorComoUsado()
	. 

Los limites del campo de juego estan dados por los limites del tablero

FIGURAS:
	equipo local (rayas)
	equipo visitante (franja horizontal)
________________________________________

Funciones y procedimientos:

colorEquipoLocal()
colorEquipoVisitante()
colorPelota()
colorEquipoRival(colorEquipo)

hayJugador(colorEquipo)
estaMarcadoHacia(dir, colorEquipo)
jugadorEstaUsado()
marcado(colorEquipo)
hayPase(dir, colorEquipo)

MarcarJugadorComoUsado()
____________



*/

program {
	//return (estaMarcadoHacia(Norte, colorEquipoVisitante()))
	//return (hayPase(Sur, colorEquipoLocal()))

	//return (marcado(Rojo))
	//return(esPaseBueno(Rojo))
	//return (esPaseBuenoAl(Norte, Rojo))
	//return (queTanBuenoEsPaseA(Norte, Rojo)) 
	//return (mejorDirParaPase(Rojo))

	
	//return (hayGolAl(Este, Rojo))
	//return (hayGolAl(Sur, Azul))
	return (hayGol(Rojo))
}

function colorEquipoLocal() {return (Rojo)}
function colorEquipoVisitante() {return (Azul)}
function colorPelota() {return (Negro)}
function colorArco() {return (Verde)}

//PRE: No puede haber dos jugadores en una misma celda
function hayJugador(colorEquipo) {
	return (hayBolitas(colorEquipo))
}

/*
PRO: True si el jugador bajo el cabezal en una scs de pases fue usado
PRE: Que exista un jugador en la celda

Si hay mas de 1 bolita de alguno de algun jugador de un equipo en una celda es porque esta usado
*/
function jugadorEstaUsado() {
	return (nroBolitas(colorEquipoLocal())>1 || nroBolitas(colorEquipoVisitante())>1)
}

/*
PRO: Marca al jugador bajo el cabezal como un jugador que ya ha tocado la pelota en un scs de pases

Agregando una bolita mas a la que ya estaba del color de algun equipo
*/
procedure MarcarJugadorComoUsado() {
	if (hayJugador(colorEquipoLocal())) {
		Poner(colorEquipoLocal())
	}
	if (hayJugador(colorEquipoVisitante())) {
		Poner(colorEquipoVisitante())
	}
}

/*
PRO: True si hay un jugador del equipo contrario en la celda lindante a dir
PRE: El cabezal se encuentra sobre un jugador del equipo colorEquipo 
*/
function estaMarcadoHacia(dir, colorEquipo) {
	return (puedeMover(dir) && estaMarcadoHaciaParcial(dir, colorEquipoRival(colorEquipo)))
}

/*PRE: Tiene que existir una celda en direccion @param dir*/
function estaMarcadoHaciaParcial(dir, colorEquipoRival) {
	Mover(dir)
	return (hayJugador(colorEquipoRival))
}

/*
PRO: True si el jugador se encuentra marcado en cualquiera de las direcciones
PRE: El cabezal se encuentra sobre una celda que contiene un jugador de colorEquipo
*/
function marcado(colorEquipo) {
	hayMarca := False
	foreach d in [minDir() .. maxDir()] {
		//hayMarca := hayMarca || estaMarcadoHacia(d, colorEquipoRival(colorEquipo)) //estaba invierto el equipo dos veces
		hayMarca := hayMarca || estaMarcadoHacia(d, colorEquipo)
	}
	return (hayMarca)
}

/*
PRO: Denota el color del equipo rival recibiendo @param colorEquipo
PRE: Tiene que existir un jugador en la celda y ser de alguno de los 2 equipos
*/
function colorEquipoRival(colorEquipo) {
	colorEquipoRival := colorEquipoLocal()
	if (colorEquipo == colorEquipoLocal()) {
		colorEquipoRival := colorEquipoVisitante()
	}
	return (colorEquipoRival)
}

/*
PRO: Retorta True si hay un jugador del mismo equipo que no ha sido usado en la scs de pases y se encuentra
en linea recta en direccion @param dir sin que haya ningun jugador del equipo contrario en el camino.
PRE: El cabezal se encuentra sobre una celda que contiene un jugador de colorEquipo que tiene la pelota

hayJugador(colorEquipo)
jugadorEstaUsado()
marcado()
*/
function hayPase(dir, colorEquipo) {
	if (not estaMarcadoHacia(dir, colorEquipo)) {
		Mover(dir)
	}
	while (puedeMover(dir) 
			&& not hayJugador(colorEquipo) 
			&& not hayJugador(colorEquipoRival(colorEquipo))) {
		Mover(dir)
	}
	return (hayJugador(colorEquipo) && not jugadorEstaUsado())
}

/*
PRE: El cabezal se encuentra sobre una celda que contiene un jugador de colorEquipo que tiene la pelota.
Hay al menos una direccion hacia la cual hay un pase posible y dicho jugador no esta marcado ni ha sido usado aun.
RETURN: Direccion hacia la cual se puede realizar el mejor pase.

Un pase es mejor cuando el jugador al que se le va a pasar no esta marcado, ni ha sido usado y se encuentra
a distancia maxima.
*/
function mejorDirParaPase(colorEquipo) {
	mejorDistancia := 0
	mejorDir := Norte
	foreach d in [minDir() .. maxDir()] {
		if (queTanBuenoEsPaseA(d, colorEquipo) > mejorDistancia) {
			mejorDistancia := queTanBuenoEsPaseA(d, colorEquipo)
			mejorDir := d
		}
	}
	return (mejorDir)
}

/*
PRO: Retorna la distancia hacia la cual se encuentra el jugador MAS LEJOS al cual se la pasara la pelota en dicha direccion.
Retorno 0 en caso de que el jugador a recibir este marcado o ya haya tocado la pelota
PRE: hayPase(dir, colorEquipo) es True
*/
function queTanBuenoEsPaseA(dir, colorEquipo) {
	distanciaBuena := ifElse(esPaseBuenoAl(dir, colorEquipo), 1, 0)	//sino hay jugador con buen pase devuelvo 0
	
	Mover(dir)
	distancia := 1	
	
	while (puedeMover(dir)) {
		Mover(dir)
		distancia := distancia + 1
		if (hayJugador(colorEquipo) && esPaseBueno(colorEquipo)) {
			distanciaBuena := distancia
		}
	}
	return (distanciaBuena)
}

//PRO: Devuelve True si hay un pase bueno en direccion @param dir
function esPaseBuenoAl(dir, colorEquipo) {
	return (puedeMover(dir) && esPaseBuenoAlParcial(dir, colorEquipo))
}

//PRE: Tiene que existir una celda en direccion @param dir
function esPaseBuenoAlParcial(dir, colorEquipo) {
	Mover(dir)
	return (hayJugador(colorEquipo) && esPaseBueno(colorEquipo))
}

/*
PRO: Retorna True si el jugador no esta marcado y no toco la pelota, pues es un buen pase.
PRE: Que haya un jugador en la celda actual
*/
function esPaseBueno(colorEquipo) {
	return (not marcado(colorEquipo) && not jugadorEstaUsado())
}

function ifElse(condicion, v, f) {
	ret := f
	if (condicion) {
		ret := v
	}
	return (ret)
}

/*
PRO: True si tras una scs de pases, algun jugador del equipo puede lanzar al arco rival y convertir un gol.
PRE: El cabezal se encuentra sobre una celda que contiene un jugador de colorEquipo que tiene la pelota
De haber una scs de pases que termina en gol, esta es la que se obtiene de ir dando siempre el pase hacia
la mejor direccion. Por otra parte esta es unica, es decir, en c/pase hay un unico jugador a maxima distancia 
posible.

Para que pueda convertir un gol, el jugador con la pelota tiene que estar a menos de 3 celdas del arco rival
y el arco no tiene que estar bloqueado por ningun jugador, ni rival ni propio en el trayecto desde el jugador 
hasta el arco.
*/
function puedeMeterGol(colorEquipo) {
	while (not hayGol(colorEquipo) && hayPase(mejorDirParaPase(colorEquipo), colorEquipo)) {
		PasarLaPelota(mejorDirParaPase(colorEquipo), distancia, colorEquipo)
	}
	return (hayGol(colorEquipo))
}

/*
PRO: Pasar la pelota de un comaniero a otro de la mejor manera 
PRE: Que el cabezal este en una celda con un jugador que tiene la pelota
*/
procedure PasarLaPelota(dir, distancia, colorEquipo) {

}

/*
PRO: True si el jugador puede convertir un gol lanzando la pelota en alguna direccion.
PRE: El cabezal se encuentra sobre un jugador que tiene la pelota
*/
function hayGol(colorEquipo) {
	hayGolAl := False
	foreach d in [minDir() .. maxDir()] {
		hayGolAl := hayGolAl || ifElse(hayGolAl(d, colorEquipo), True, False)
	}
	return (hayGolAl)
}

/*
PRO: Denota True si hay gol en una direccion @param dir
PRE: El cabezal tiene que estar situado en un jugador con la pelota, el jugador tiene que estar a menos de 3 celdas
y la trayectoria hacia el arco tiene que estar libre
*/
function hayGolAl(dir, colorEquipo) {
	Mover(dir)
	celdas := 1
	while (puedeMover(dir) 
			&& not hayJugador(colorEquipo) 
			&& not hayJugador(colorEquipoRival(colorEquipo))) {
		Mover(dir)
		celdas := celdas + 1
	}
	return (celdas <= 3 && hayArco(colorEquipoRival(colorEquipo)))
}

/*
PRO: Denota si en una celda hay una parte del arco de algun equipo

1 bolita verde representa el arco del equipo local
2 verdes arco visitante
*/
function hayArco(colorEquipo) {
	ret := False
	if ((colorEquipo == colorEquipoLocal()) 
		&& nroBolitas(colorArco()) == 1) {
		ret := True
	}
	if ((colorEquipo == colorEquipoVisitante())
		&& nroBolitas(colorArco()) == 2) {
		ret := True
	}
	return (ret)
} 
