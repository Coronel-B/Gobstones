type Videoclub is record {
	field pelis -- [Pelicula]
	field alquileres --[Alquiler]
}

/*
PRE: Si una pelicula tiene 0 copias no podra estar alquilada
Las peliculas con mas copias son mas baratas
*/
type Pelicula is record {
	field nroPelicula -- Numero:: pk
	field actores -- [Numero]: pk
	field cantCopias -- Numero: Indica de cuantas copias es dueno el videoclub
}

type Alquiler is record {
	field nroPelicula -- Numero: fk
	field nroCliente -- Numero: pk
	field diasAlquiler -- Numero: Cant de dias que se llevaron la pelicula
}

function lotePeliculas() {
	return ([Pelicula(nroPelicula <- 1, actores <- [1,2,3], cantCopias <- 5), 
			Pelicula(nroPelicula <- 2, actores <- [2,3], cantCopias <- 4),
			Pelicula(nroPelicula <- 3, actores <- [5,2,3], cantCopias <- 3),
			Pelicula(nroPelicula <- 4, actores <- [6,4], cantCopias <- 0),
			Pelicula(nroPelicula <- 5, actores <- [1,6,7], cantCopias <- 1)])
}

function loteAlquileres() {
	return ([Alquiler(nroPelicula <- 2, nroCliente <- 10, diasAlquiler <- 8),
			Alquiler(nroPelicula <- 3, nroCliente <- 10, diasAlquiler <- 6),
			Alquiler(nroPelicula <- 5, nroCliente <- 10, diasAlquiler <- 2),
			Alquiler(nroPelicula <- 5, nroCliente <- 2, diasAlquiler <- 2)])
}

program {
	// Ej. 1
	/*videoclub := Videoclub(pelis <- lotePeliculas(), alquileres <- loteAlquileres())
	return (pelisAburridas(videoclub))*/

	// Ej. 2
	/*videoclub := Videoclub(pelis <- lotePeliculas(), alquileres <- loteAlquileres())
	return (agregarActor(videoclub, 1, 99))	*/

	// Ej. 3
	videoclub := Videoclub(pelis <- lotePeliculas(), alquileres <- loteAlquileres())
	return (cuantoDebe(videoclub, 10))
}

/*
PRO: Prepara la lista de peliculas que no alquilo nadie
PRE: Ninguna
RET: [Pelicula]
@param videoclub: Videoclub
*/
function pelisAburridas(videoclub) {
	aburridas := []
	foreach pelicula in pelis(videoclub) {
		if (not pertenece(nroPelicula(pelicula), camposDeInstancias(alquileres(videoclub)))) {
			aburridas := aburridas ++ [pelicula] 
		}
	}
	return (aburridas)
}

/*
PRO: Prepara una lista con todos los valores de las instancias de un campo determinado 
de un registro
PRE: No tiene
RET: Una lista de campos del mismo dominio: [nroPelicula(instancia)]
@param instancias: [instancia]
*/
function camposDeInstancias(instancias) {
	lsRet := []
	foreach instancia in instancias {
		lsRet := lsRet ++ [nroPelicula(instancia)]	
	}
	return (lsRet)
}


/*
PRO: Indica si el elemento pertenece a la lista
RETURN: Booleano
@param e: elemento
@param xs: lista
*/
function pertenece(e, xs) {
	ls := xs

	//not isEmpty(ls) lo pongo como primer premisa sino no funciona
	while(not isEmpty(ls) && head(ls) /= e) {	
		ls := tail(ls)
	}

	return (not isEmpty(ls))
}

#ALGORITMO DE MODIFICAR 1 ELEMENTO
/*
PRO: Prepara un nuevo videoclub de @videoclub que resulta de agregar un actor
@nroActor a la lista de actores [actores] de la pelicula @nroPelicula correspondiente 
a la lista de pelis [Pelicula]
PRE: @videoclub tiene la pelicula @nroPelicula. El actor @nroActor puede o no ser parte
de la pelicula @nroPelicula antes de ser agregado. La solucion tiene que funcionar para
cualquier caso.
RET: Videoclub
@param videoclub: Videoclub
@param nroPelicula: Numero
@param nroActor: Numero
*/
function agregarActor(videoclub, nroPelicula, nroActor) {
	pelicula := buscarPelicula(videoclub, nroPelicula)
	peliculaModificada := Pelicula(pelicula|actores <- sinDuplicados(actores(pelicula) ++ [nroActor]))

	peliculas := pelis(videoclub)
	pelisRet := []
	while (head(peliculas) /= pelicula) {
		pelisRet := pelisRet ++ [head(peliculas)]
		peliculas := tail(peliculas)
	}
	//Asegurarme de hacer el tail de la ls que obtuve del param (peliculas) y no del filtro que voy a devolver.
	pelisRet := pelisRet ++ [peliculaModificada] ++ tail(peliculas)
	return (Videoclub(videoclub|pelis <- pelisRet))
}

#ALGORITMO DE BUSQUEDA DE 1 ELEMENTO
/*
PRO: Prepara una pelicula con un determinado @nroPelicula
PRE: Videoclub @videoclub tiene la pelicula @nroPelicula
RET: Pelicula 
@param videoclub: Videoclub
@param nroPelicula: Numero
*/
function buscarPelicula(videoclub, nroPelicula) {
	peliculas := pelis(videoclub)
	while(nroPelicula(head(peliculas)) /= nroPelicula) {
		peliculas := tail(peliculas)
	}
	return (head(peliculas))
}

/*
PRO: Filtra todos los elementos de una lista sin repetirlos 
RETURN: Lista
@param ls: lista
*/
function sinDuplicados(ls) {
	lista := ls
	filtro := []

	while(not isEmpty(lista)) {
		//filtro := filtro ++ ifElse(not pertenece(head(lista), filtro), [head(lista)], [])
		filtro := filtro ++ singularSi(not pertenece(head(lista), filtro), head(lista))
		lista := tail(lista)
	}

	return (filtro)
}

function ifElse(condicion, v, f) {
	ret := f
	if (condicion) {
		ret := v
	}
	return (ret)
}

//PRO: Devuelve un elemento dependiendo el booleano
function singularSi(b, e) {
	return (ifElse(b, [e], []))
}

/*
PRO: Prepara cuanto debe abonar el cliente. 
Las peliculas con mas copias son mas baratas y el costo de un alquiler es
60 dividido la cantidad de copias y multiplicado por la cant de dias alquiladas.
PRE: El cliente @nroCliente es un cliente valido que ha realizado al menos un alquiler.
RET: Numero
@param videoclub: Videoclub
@param nroCliente: Numero
*/
function cuantoDebe(videoclub, nroCliente) {
	debe := 0
	foreach alquilerCliente in alquileresCliente(alquileres(videoclub), nroCliente) {
		//Costo por alquiler
		debe := debe + (60 div diasAlquiler(alquilerCliente) * cantCopias(buscarPelicula(videoclub, nroPelicula(alquilerCliente))))
	}
	return (debe)
}

/*
PRO: Prepara los @alquileres de un @nroCliente
PRE: No tiene
RET: [Alquiler]
@param alquileres: [Alquiler]
@param nroCliente: Numero
*/
function alquileresCliente(alquileres, nroCliente) {
	alquileresRet := []
	foreach alquiler in alquileres {
		alquileresRet := alquileresRet ++ singularSi(nroCliente(alquiler) == nroCliente, alquiler)
	}
	return (alquileresRet)
}